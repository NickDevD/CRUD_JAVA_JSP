version: '3.8'

services:
  java-web:
    build: . # Constrói a imagem a partir do seu Dockerfile no diretório atual
    container_name: java-web-jsp
    ports:
      - "8081:8080"
    environment:
      # >>> ESSAS SÃO AS VARIÁVEIS QUE SUA APLICAÇÃO JSP DEVE LER <<<
      # Altere seu código JSP/Servlet/DataSource para ler estas variáveis
      MYSQL_CONNECTION_URI: jdbc:mysql://mysql-db:3306/controleclientes # Use o nome do serviço 'mysql-db' como hostname
      MYSQL_USER: root
      MYSQL_PASSWORD: admin
    restart: on-failure
    depends_on:
      mysql-db:
        # >>> CRUCIAL: Garante que o 'mysql-db' esteja saudável antes do 'web-app' iniciar <<<
        condition: service_healthy

  mysql-db:
    image: mysql:8.0
    container_name: crud-mysql
    ports:
      - "3308:3306" # Mapeia a porta 3306 do contêiner para a 3308 do seu host
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: controleclientes # Garante que este banco de dados seja criado na inicialização
    volumes:
      - mysql_data:/var/lib/mysql # Persiste os dados do MySQL
      # >>> ESSA LINHA É CRÍTICA para a nova máquina <<<
      - ./db_init:/docker-entrypoint-initdb.d # Monta o diretório com seu init.sql para inicializar o DB
    restart: always
    # >>> CRUCIAL: Healthcheck para o MySQL <<<
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 5s     # Verifica a cada 5 segundos
      timeout: 10s     # Espera 10 segundos pela resposta
      retries: 5       # Tenta 5 vezes antes de declarar como 'unhealthy'
      start_period: 30s # Dá 30 segundos para o MySQL inicializar antes de começar os testes

volumes:
  mysql_data: # Define o volume nomeado para os dados do MySQL